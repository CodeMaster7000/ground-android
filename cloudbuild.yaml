#
# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Loads the Docker image from the container registry and then runs the following steps:
#
#  1. Copy Gradle cache
#  2. Extract tarball
#  3. Copy .git dir
#  4. Build debug APK
#  5. Run code quality checks (suppress failure if check fails)
#  6. Run unit tests (suppress failure if tests fail)
#  7. Save reports to GCS
#  8. Update badge status and fail the build if any failures were suppressed in previous steps
#  9. Compress Gradle files
#  10. Save tarball
#
#  NOTE: APKs are saved to GCS only if the build passes
#
# Based on https://github.com/GoogleCloudPlatform/cloud-builders-community

steps:

  # Copy the cache from last build
  - name: 'gcr.io/cloud-builders/gsutil'
    id: 'Copying gradle build cache tar from GCS'
    # we use rsync and not cp so that this step doesn't fail the first time it's run
    args: ['rsync', 'gs://${_CACHE_BUCKET}/', './']

  # Extract the copied tar file
  - name: 'gcr.io/$PROJECT_ID/android:base'
    id: 'Extracting tar'
    # This might fail the first time, but that's okay
    args:
      - '-c'
      - |
        tar zxf cache.tgz || echo "No cache found"

  # Copy .git directory to workspace.
  # This is needed by gitVersioner plugin for auto-generating version code and version name.
  #
  # TODO: Remove this step when .git can be explicitly included in the tarball using .gcloudignore
  # https://github.com/GoogleCloudPlatform/cloud-builders/issues/401
  - name: 'gcr.io/cloud-builders/git'
    id: 'Copy .git directory for versioning'
    waitFor: ['-']
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        git clone --branch master $_HEAD_REPO_URL tmp \
        && mv tmp/.git . \
        && rm -rf tmp

  # Build debug APK
  - name: 'gcr.io/$PROJECT_ID/android:28'
    id: 'Build debug apk'
    # Explicitly excluding checkCode since it gets auto-triggered
    args: ['./gradlew', 'assembleDebug', '-PdisablePreDex']

  # Run code quality checks
  - name: 'gcr.io/$PROJECT_ID/android:28'
    id: 'Run code checks'
    args:
      - '-c'
      - |
        ./gradlew checkCode 2> check-logs.txt || echo "fail" > build-status.txt
        cat check-logs.txt

  # Run unit tests
  - name: 'gcr.io/$PROJECT_ID/android:28'
    id: 'Run unit tests'
    args:
      - '-c'
      - |
        ./gradlew testDebugUnitTest 2> unit-test-logs.txt || echo "fail" > build-status.txt
        cat unit-test-logs.txt

  # Save all reports to GCS
  - name: 'gcr.io/cloud-builders/gsutil'
    id: 'Save reports to GCS'
    args: ['cp', '-r', 'gnd/build/reports', 'gs://${_ARTIFACT_BUCKET}/$BRANCH_NAME-$BUILD_ID/reports']

  # Update status badge and fail build if errors were found in "build" step
  - name: 'gcr.io/cloud-builders/gsutil'
    id: 'Update build status'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Display artifact bucket link
        echo "Reports uploaded to https://console.cloud.google.com/storage/browser/${_ARTIFACT_BUCKET}/$BRANCH_NAME-$BUILD_ID/"

        # Update build status if running on master branch
        if [[ "${_PUSH_TO_MASTER}" ]]; then

          # Gradle Dependencies Status
          if [[ -f gnd/build/reports/dependencyUpdates/report.json ]]; then
            python cloud-builder/generate_dependency_health_svg.py gnd/build/reports/dependencyUpdates/report.json dependency.svg

            # Copy artifacts for Github badge
            gsutil cp dependency.svg gs://${_CACHE_BUCKET}/dependency.svg
            gsutil cp gnd/build/reports/dependencyUpdates/report.txt gs://${_CACHE_BUCKET}/dependency.txt

            # Makes files publicly readable
            gsutil acl ch -u AllUsers:R gs://${_CACHE_BUCKET}/dependency.svg
            gsutil acl ch -u AllUsers:R gs://${_CACHE_BUCKET}/dependency.txt
          fi

          # Build Status
          if [ -f build-status.txt ] && [ $(< build-status.txt) == "fail" ]; then
            gsutil cp cloud-builder/failure.svg gs://${_CACHE_BUCKET}/status.svg
          else
            gsutil cp cloud-builder/success.svg gs://${_CACHE_BUCKET}/status.svg
          fi

          # Make file publicly readable
          gsutil acl ch -u AllUsers:R gs://${_CACHE_BUCKET}/status.svg
        fi

        # Delayed build fail
        if [ -f build-status.txt ] && [ $(< build-status.txt) == "fail" ]; then
          cat check-logs.txt
          cat unit-test-logs.txt
          exit 1
        fi

  # Compress the gradle build cache
  - name: 'gcr.io/$PROJECT_ID/android:base'
    id: 'Compress gradle build cache'
    args:
      - '-c'
      - |
        tar zcf cache.tgz .gradle

  # Store the build cache
  - name: gcr.io/cloud-builders/gsutil
    id: 'Save gradle cache to GCS'
    args: ['cp', 'cache.tgz', 'gs://${_CACHE_BUCKET}/cache.tgz']

options:
  env:
    - 'GRADLE_USER_HOME=/workspace/.gradle'
  logging: GCS_ONLY

# TODO: Re-enable saving artifacts when a valid google-services.json is used in GCB
# Save the APKs
#artifacts:
#  objects:
#    location: 'gs://${_ARTIFACT_BUCKET}/$BRANCH_NAME-$BUILD_ID'
#    paths: ['gnd/build/outputs/apk/*/*.apk']

timeout: 1800s
